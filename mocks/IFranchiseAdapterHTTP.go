// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dto "github.com/viictormg/clubHub/internal/domain/dto"
)

// IFranchiseAdapterHTTP is an autogenerated mock type for the IFranchiseAdapterHTTP type
type IFranchiseAdapterHTTP struct {
	mock.Mock
}

// ExtractAssetsPageAdapterHTTP provides a mock function with given fields: url
func (_m *IFranchiseAdapterHTTP) ExtractAssetsPageAdapterHTTP(url string) (*string, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for ExtractAssetsPageAdapterHTTP")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*string, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractFooterPageAdapterHTTP provides a mock function with given fields: url
func (_m *IFranchiseAdapterHTTP) ExtractFooterPageAdapterHTTP(url string) (*string, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for ExtractFooterPageAdapterHTTP")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*string, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractInfoDomainAdapterHTTP provides a mock function with given fields: url
func (_m *IFranchiseAdapterHTTP) ExtractInfoDomainAdapterHTTP(url string) (*string, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for ExtractInfoDomainAdapterHTTP")
	}

	var r0 *string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*string, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *string); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*string)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExtractURLInfoAdapterHTTP provides a mock function with given fields: url
func (_m *IFranchiseAdapterHTTP) ExtractURLInfoAdapterHTTP(url string) (*dto.SSLInfoResultDTO, error) {
	ret := _m.Called(url)

	if len(ret) == 0 {
		panic("no return value specified for ExtractURLInfoAdapterHTTP")
	}

	var r0 *dto.SSLInfoResultDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.SSLInfoResultDTO, error)); ok {
		return rf(url)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.SSLInfoResultDTO); ok {
		r0 = rf(url)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.SSLInfoResultDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFranchiseAdapterHTTP creates a new instance of IFranchiseAdapterHTTP. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFranchiseAdapterHTTP(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFranchiseAdapterHTTP {
	mock := &IFranchiseAdapterHTTP{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
