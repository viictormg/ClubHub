// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/viictormg/clubHub/internal/domain/entity"
)

// ICompanyAdapter is an autogenerated mock type for the ICompanyAdapter type
type ICompanyAdapter struct {
	mock.Mock
}

// GetCompanyByNameAdapter provides a mock function with given fields: name
func (_m *ICompanyAdapter) GetCompanyByNameAdapter(name string) (*entity.CompanyEntity, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetCompanyByNameAdapter")
	}

	var r0 *entity.CompanyEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.CompanyEntity, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.CompanyEntity); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CompanyEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICompanyAdapter creates a new instance of ICompanyAdapter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICompanyAdapter(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICompanyAdapter {
	mock := &ICompanyAdapter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
