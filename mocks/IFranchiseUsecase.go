// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	dto "github.com/viictormg/clubHub/internal/domain/dto"

	model "github.com/viictormg/clubHub/internal/application/model"
)

// IFranchiseUsecase is an autogenerated mock type for the IFranchiseUsecase type
type IFranchiseUsecase struct {
	mock.Mock
}

// CreateFranchiseUsecase provides a mock function with given fields: _a0
func (_m *IFranchiseUsecase) CreateFranchiseUsecase(_a0 model.FranchiseCreateModel) (*dto.CreationDTO, error) {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for CreateFranchiseUsecase")
	}

	var r0 *dto.CreationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(model.FranchiseCreateModel) (*dto.CreationDTO, error)); ok {
		return rf(_a0)
	}
	if rf, ok := ret.Get(0).(func(model.FranchiseCreateModel) *dto.CreationDTO); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(model.FranchiseCreateModel) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchiseByIDUsecase provides a mock function with given fields: id
func (_m *IFranchiseUsecase) GetFranchiseByIDUsecase(id int) (*dto.FranchiseDTO, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetFranchiseByIDUsecase")
	}

	var r0 *dto.FranchiseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*dto.FranchiseDTO, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *dto.FranchiseDTO); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.FranchiseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchiseByNameUsecase provides a mock function with given fields: name
func (_m *IFranchiseUsecase) GetFranchiseByNameUsecase(name string) (*dto.FranchiseDTO, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetFranchiseByNameUsecase")
	}

	var r0 *dto.FranchiseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*dto.FranchiseDTO, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *dto.FranchiseDTO); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.FranchiseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchiseParamUsecase provides a mock function with given fields: key, param
func (_m *IFranchiseUsecase) GetFranchiseParamUsecase(key string, param string) (*[]dto.FranchiseDTO, error) {
	ret := _m.Called(key, param)

	if len(ret) == 0 {
		panic("no return value specified for GetFranchiseParamUsecase")
	}

	var r0 *[]dto.FranchiseDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]dto.FranchiseDTO, error)); ok {
		return rf(key, param)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]dto.FranchiseDTO); ok {
		r0 = rf(key, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]dto.FranchiseDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFranchiseUsecase creates a new instance of IFranchiseUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFranchiseUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFranchiseUsecase {
	mock := &IFranchiseUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
