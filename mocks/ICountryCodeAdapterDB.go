// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"
	entity "github.com/viictormg/clubHub/internal/domain/entity"
)

// ICountryCodeAdapterDB is an autogenerated mock type for the ICountryCodeAdapterDB type
type ICountryCodeAdapterDB struct {
	mock.Mock
}

// GetCountryByIDAdapter provides a mock function with given fields: id
func (_m *ICountryCodeAdapterDB) GetCountryByIDAdapter(id int) (*entity.CountryEntity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetCountryByIDAdapter")
	}

	var r0 *entity.CountryEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.CountryEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.CountryEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.CountryEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewICountryCodeAdapterDB creates a new instance of ICountryCodeAdapterDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewICountryCodeAdapterDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *ICountryCodeAdapterDB {
	mock := &ICountryCodeAdapterDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
