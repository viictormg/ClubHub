// Code generated by mockery v2.38.0. DO NOT EDIT.

package mocks

import (
	dto "github.com/viictormg/clubHub/internal/domain/dto"
	entity "github.com/viictormg/clubHub/internal/domain/entity"

	mock "github.com/stretchr/testify/mock"
)

// IFranchiseAdapterDB is an autogenerated mock type for the IFranchiseAdapterDB type
type IFranchiseAdapterDB struct {
	mock.Mock
}

// CreateFranchiseAdapter provides a mock function with given fields: newFranchise
func (_m *IFranchiseAdapterDB) CreateFranchiseAdapter(newFranchise *entity.FranchiseEntity) (*dto.CreationDTO, error) {
	ret := _m.Called(newFranchise)

	if len(ret) == 0 {
		panic("no return value specified for CreateFranchiseAdapter")
	}

	var r0 *dto.CreationDTO
	var r1 error
	if rf, ok := ret.Get(0).(func(*entity.FranchiseEntity) (*dto.CreationDTO, error)); ok {
		return rf(newFranchise)
	}
	if rf, ok := ret.Get(0).(func(*entity.FranchiseEntity) *dto.CreationDTO); ok {
		r0 = rf(newFranchise)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dto.CreationDTO)
		}
	}

	if rf, ok := ret.Get(1).(func(*entity.FranchiseEntity) error); ok {
		r1 = rf(newFranchise)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchiseByIDAdapter provides a mock function with given fields: id
func (_m *IFranchiseAdapterDB) GetFranchiseByIDAdapter(id int) (*entity.FranchiseEntity, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetFranchiseByIDAdapter")
	}

	var r0 *entity.FranchiseEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*entity.FranchiseEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(int) *entity.FranchiseEntity); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.FranchiseEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchiseByNameAdapter provides a mock function with given fields: name
func (_m *IFranchiseAdapterDB) GetFranchiseByNameAdapter(name string) (*entity.FranchiseEntity, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetFranchiseByNameAdapter")
	}

	var r0 *entity.FranchiseEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*entity.FranchiseEntity, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *entity.FranchiseEntity); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.FranchiseEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchisesByCompanyID provides a mock function with given fields: companyID
func (_m *IFranchiseAdapterDB) GetFranchisesByCompanyID(companyID int) (*[]entity.FranchiseEntity, error) {
	ret := _m.Called(companyID)

	if len(ret) == 0 {
		panic("no return value specified for GetFranchisesByCompanyID")
	}

	var r0 *[]entity.FranchiseEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(int) (*[]entity.FranchiseEntity, error)); ok {
		return rf(companyID)
	}
	if rf, ok := ret.Get(0).(func(int) *[]entity.FranchiseEntity); ok {
		r0 = rf(companyID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.FranchiseEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(companyID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetFranchisesByParamAdapter provides a mock function with given fields: key, value
func (_m *IFranchiseAdapterDB) GetFranchisesByParamAdapter(key string, value string) (*[]entity.FranchiseEntity, error) {
	ret := _m.Called(key, value)

	if len(ret) == 0 {
		panic("no return value specified for GetFranchisesByParamAdapter")
	}

	var r0 *[]entity.FranchiseEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*[]entity.FranchiseEntity, error)); ok {
		return rf(key, value)
	}
	if rf, ok := ret.Get(0).(func(string, string) *[]entity.FranchiseEntity); ok {
		r0 = rf(key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]entity.FranchiseEntity)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewIFranchiseAdapterDB creates a new instance of IFranchiseAdapterDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewIFranchiseAdapterDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *IFranchiseAdapterDB {
	mock := &IFranchiseAdapterDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
